/**
* the \@param notation indicates an input paramater for a function. For example
* @param {string} foobar - indicates the function should accept a string
* and it should be called foobar, for example function(foobar){}
* \@return is the value that should be returned
*/

/**
* Write a function called `uselessFunction`.
* It should accept no arguments.
* It should return the null value.
* @return {null} - 'useless'.
*/

//your code here
function uselessFunction()
{
	return null;
}
//end your code

var bar = 'not a function';
var barType = typeof bar;


/**
* Assign the above variable 'bar' to an anonymous function with the following
* properites.
* @param {float[]} doubleArray - an array of floating point numbers.
* The function should multiply every number in the array by 2 (this should
* change the content of the array).
* @return {boolean} - true if the operation was sucessful, false otherwise.
* This should return false if any value in the array cannot be doubled.
*/

//your code here
bar = function(terms){
	for(var i = 0; i<terms.length; i++)
	{
		if (typeof(terms[i]) != 'number')
		 {
		 	return false;
		 }
		 else
		 {
		 	var tmp  = terms[i] * 2.0;
		 	terms[i] = tmp;
		 }
	};
	return true;
};
//end your code

/**
* Creates a new GitLog
* @class
* @property {string} hash - the hash of the commit
* @property {Date} date - the date of the commit as a JS Date object
* @property {string} message - the commit message
*/
function GitLog(hash, date, message) {
    this.hash = hash;
    this.date = date;
    this.message = message;
}

/**
* Create a function called parseGit to parse Git commit logs
* The logs will be generated by the following command
* git log --pretty=format:"%h %ad \"%s\"" --date=rfc
* The result looks like this
* log = 
* |hash | |             date           | |   message    |
* There will always be a space between the hash and date and between the date
* and the first " of the commit message.
*
* You will covert these into GitLog objects with the following properties:
*
*
* @param {array.<string>} logArray - an array of Git commit messages of the
* above
* format.
* @return {array.<GitLog>} - return an array GitLog instances
*/

//your code here
function parseGit(log_array){
	var gitArray = [];
	for(var i=0;i<log_array.length;i++)
	{	log = log_array[i];
		var tokens = log.split(' ');
		var hash = tokens[0];
		var date_items = tokens.slice(1,6);
		var message_items = tokens.slice(7,tokens.length);
		var clean_items = [];
		var date_str = date_items.join(" ");
		var date = new Date(date_str);
		for (var j = 0; j<message_items.length; j++)
		{
			var item = message_items[j];
			message_items[j] = item.replace('"','');
		};
		var msg = message_items.join(" ");
		var git_item  = new GitLog(hash, date, msg);
		gitArray[i] = git_item;
	};
	return gitArray;
}
